TapisV3 Apps Web Application Notes
=======================================

------------
Introduction
------------
This is the TapisV3 Apps web application front end.
It was initially created by copying files from the TapisV3 Systems application (repo tapis-systems).

It integrates the following facilities:
    1. JAX-RS to implement REST endpoints.
    2. JAX-RS and servlet filters.
    3. Logback for logging.
    4. Buildnumber maven plugin to capture git information at compile time.
    5. Flyway to create database schema.
    6. jOOQ to generate DSL code for DB operations. Needed only when db schema changes.
    7. Hikari for database connection pooling.
    8. io.jsonwebtoken for JWT processing.
    9. Aloe support for parameter parsing, email clients, threadlocal management,
       UUIDs, etc.

The back end may be found in the lib directory

OpenAPI spec manually maintained in tapis-client-java repo at apps-client/AppsAPI.yaml

-----------------------------
Database Schema
-----------------------------
Flyway is used to create and update the DB schema.
SQL files are in lib/src/main/resources/db/migration
Script to drop the DB is at lib/main/resources/sql/drop.sql
See notes in lib/pom.xml for how to do a db-update and comments in lib/src/main/resources/db/migration/V001__init.sql
for how to create the initial postgres database and user. For deployment this is done during startup, see files in
the tapis-deploy repo under apps directory.

------------
ENUMs
------------
In general enumeration defintions may exist in up to three places
  - In the JsonSchema file that validates incoming requests.
  - In the model class representing the object (e.g. edu.utexas.tacc.tapis.apps.model.App, Capability)
  - In the sql initializing the DB schema.
Here are the current enumerations and the locations where they are defined. Note that this list may not be up to date.
  Enumeration      Json Schema               Model class       Init SQL
  ===========      ================          ==============    =============
  JobType          Definitions.json          model.App         No
  AppOperation     <N/A>                     model.App         No
  Permission       PermsRequest.json         model.App         No
  Capability       Definitions.json          model.Capability  No

------------
Server Usage
------------
Web applications can be controlled using these environment variables:

TAPIS_ENVONLY_ALLOW_TEST_QUERY_PARMS - allow test-only values sent as query parameters
TAPIS_ENVONLY_JWT_OPTIONAL - set to true to skip jwt processing
TAPIS_ENVONLY_KEYSTORE_PASSWORD - password to unlock jwt private signing key
TAPIS_ENVONLY_SKIP_JWT_VERIFY - set to true to skip jwt signature verification
TAPIS_REQUEST_LOGGING_FILTER_PREFIXES - set url prefixes that log each request
TAPIS_SVC_URL_TENANTS - Base URL for Tenants service
TAPIS_SVC_URL_TOKENS - Base URL for Tokens service
TAPIS_SVC_URL_SK - Base URL for Security Kernel service

See the TapisEnv class for an explanation of how to use these parameters and for the
complete listing of all possible Tapis parameters.  For example, to not require a jwt
in a request and to log all requests, set the following parameters when starting the 
server:
 
        TAPIS_ENVONLY_JWT_OPTIONAL = true
        TAPIS_REQUEST_LOGGING_FILTER_PREFIXES = /v3/apps.
        
Note that if jwt content is required to execute requests, that information can be passed 
in request query parameters when TAPIS_ENVONLY_ALLOW_TEST_QUERY_PARMS = true.

Note that TAPIS_SVC_URL_TENANTS is required either in service.properties or in the environment.
The other base service URLs are optional and by default are looked up using the Tenants service.

The web application is packaged as a JAR file. Grizzly is used for the server.

------------
Client Usage
------------
*** From Browser, enter these urls to hit application endpoints:

- Run GET on healthcheck and readycheck methods
    http://localhost:8080/v3/apps/healthcheck
    http://localhost:8080/v3/apps/readycheck
    

-------------------------------------------------------------------
Creating a run configuration for the front end server in IntelliJ
-------------------------------------------------------------------
TBD - Review and update
Configure Run configuration in IntelliJ
  Run->Edit Configurations
  Click "+" and select Tomcat Server->Local
  On Server tab:
    Uncheck "Open browser" if desired
  On Deployment tab:
    Click "+" and select "tapis-appsapi:war"
    Edit "Application context:" to be "/"
  On Startup/Connection tab:
    For "Run" and "Debug" add following Environment Variables
      Name                                  Value
      ---------------------------------------------
      TAPIS_ENVONLY_ALLOW_TEST_QUERY_PARMS  TRUE
      TAPIS_ENVONLY_JWT_OPTIONAL            TRUE
      TAPIS_ENVONLY_SKIP_JWT_VERIFY         TRUE
      TAPIS_REQUEST_LOGGING_FILTER_PREFIXES /v3/apps
